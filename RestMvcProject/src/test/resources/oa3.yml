openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081
  description: Generated server url
paths:
  /api/v1/customer/{customerId}:
    get:
      tags:
      - customer-controller
      operationId: getCustomerById
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerDTO'
    put:
      tags:
      - customer-controller
      operationId: updateCustomerByID
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - customer-controller
      operationId: deleteCustomerById
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - customer-controller
      operationId: updateCustomerPatchById
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/beer/{beerId}:
    get:
      tags:
      - beer-controller
      operationId: getBeerById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BeerDTO'
    put:
      tags:
      - beer-controller
      operationId: updateById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - beer-controller
      operationId: deleteById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - beer-controller
      operationId: updateBeerPatchById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/customer:
    get:
      tags:
      - customer-controller
      operationId: getGustomersList
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDTO'
    post:
      tags:
      - customer-controller
      operationId: addCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/beer:
    get:
      tags:
      - beer-controller
      operationId: listBeers
      parameters:
      - name: beerName
        in: query
        required: false
        schema:
          type: string
      - name: beerStyle
        in: query
        required: false
        schema:
          type: string
          enum:
          - LAGER
          - PILSNER
          - STOUT
          - GOSE
          - PORTER
          - ALE
          - WHEAT
          - IPA
          - PALE_ALE
          - SAISON
      - name: showInventory
        in: query
        required: false
        schema:
          type: boolean
      - name: pageNumber
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBeerDTO'
    post:
      tags:
      - beer-controller
      operationId: handlePost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeerDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    Beer:
      required:
      - beerName
      - beerStyle
      - price
      - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int32
        beerName:
          maxLength: 50
          minLength: 0
          type: string
        beerStyle:
          type: string
          enum:
          - LAGER
          - PILSNER
          - STOUT
          - GOSE
          - PORTER
          - ALE
          - WHEAT
          - IPA
          - PALE_ALE
          - SAISON
        upc:
          maxLength: 255
          minLength: 0
          type: string
        quantityOnHand:
          type: integer
          format: int32
        price:
          type: number
        createdDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        beerOrderLines:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
        categories:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Category'
    BeerOrder:
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int64
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        customerRef:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        beerOrderLines:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
        beerOrderShipment:
          $ref: '#/components/schemas/BeerOrderShipment'
        new:
          type: boolean
    BeerOrderLine:
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int64
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        orderQuantity:
          type: integer
          format: int32
        quantityAllocated:
          type: integer
          format: int32
        beerOrder:
          $ref: '#/components/schemas/BeerOrder'
        beer:
          $ref: '#/components/schemas/Beer'
        new:
          type: boolean
    BeerOrderShipment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        beerOrder:
          $ref: '#/components/schemas/BeerOrder'
        trackingNumber:
          type: string
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        description:
          type: string
        beers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Beer'
        version:
          type: integer
          format: int64
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerName:
          type: string
        email:
          type: string
        version:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        beerOrders:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BeerOrder'
    CustomerDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerName:
          type: string
        email:
          type: string
        version:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        beerOrders:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BeerOrder'
    BeerDTO:
      required:
      - beerName
      - beerStyle
      - price
      - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int32
        beerName:
          type: string
        beerStyle:
          type: string
          enum:
          - LAGER
          - PILSNER
          - STOUT
          - GOSE
          - PORTER
          - ALE
          - WHEAT
          - IPA
          - PALE_ALE
          - SAISON
        upc:
          type: string
        quantityOnHand:
          type: integer
          format: int32
        price:
          type: number
        createdDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        categories:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Category'
        beerOrderLines:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
    PageBeerDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BeerDTO'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
